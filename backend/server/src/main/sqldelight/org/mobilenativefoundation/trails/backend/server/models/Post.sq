import org.mobilenativefoundation.trails.backend.models.Platform;

CREATE TABLE IF NOT EXISTS creator (
    id SERIAL PRIMARY KEY,
    _id VARCHAR(100),
    username VARCHAR(100) NOT NULL,
    full_name VARCHAR(255),
    profile_pic_url VARCHAR(500),
    is_verified BOOLEAN NOT NULL,
    bio TEXT,
    platform TEXT AS Platform NOT NULL,
    CONSTRAINT unique_id_username_platform UNIQUE (username, platform)
);


CREATE TABLE IF NOT EXISTS post (
    id SERIAL PRIMARY KEY,
    _id VARCHAR(100),
    creator_id SERIAL NOT NULL,
    caption TEXT,
    platform TEXT AS Platform NOT NULL,
    created_at TIMESTAMP NOT NULL,
    likes_count BIGINT NOT NULL,
    comments_count BIGINT NOT NULL,
    shares_count BIGINT NOT NULL,
    views_count BIGINT NOT NULL,
    is_sponsored BOOLEAN NOT NULL,
    location_name VARCHAR(255),
    cover_url TEXT NOT NULL,
    FOREIGN KEY (creator_id) REFERENCES creator(id)
);



CREATE TABLE IF NOT EXISTS media(
    id SERIAL PRIMARY KEY,
    post_id SERIAL NOT NULL,
    media_url TEXT NOT NULL,
    _media_url TEXT,
    media_type TEXT NOT NULL,
    height INT,
    width INT,
    duration INT,
    alt_text TEXT,
    media_format TEXT,
    FOREIGN KEY (post_id) REFERENCES post(id)
);

CREATE TABLE IF NOT EXISTS comment(
    id SERIAL PRIMARY KEY,
    _id VARCHAR(100),
    post_id SERIAL NOT NULL,
    creator_id SERIAL NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP NOT NULL,
    likes_count INT NOT NULL,
    parent_comment_id SERIAL,
    FOREIGN KEY (post_id) REFERENCES post(id),
    FOREIGN KEY (creator_id) REFERENCES creator(id),
    FOREIGN KEY (parent_comment_id) REFERENCES comment(id)
);

CREATE TABLE IF NOT EXISTS hashtag(
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS post_hashtag(
  post_id SERIAL NOT NULL,
  hashtag_id SERIAL NOT NULL,
  PRIMARY KEY (post_id, hashtag_id),
  FOREIGN KEY (post_id) REFERENCES post(id),
  FOREIGN KEY (hashtag_id) REFERENCES hashtag(id)
);

CREATE TABLE IF NOT EXISTS mention(
    id SERIAL PRIMARY KEY,
    post_id SERIAL NOT NULL,
    mentioned_username VARCHAR(100) NOT NULL,
    platform TEXT AS Platform NOT NULL,
    FOREIGN KEY (post_id) REFERENCES post(id)
);

-- Queries

insertPost:
INSERT INTO post(
    _id,
    cover_url,
    creator_id,
    caption,
    platform,
    created_at,
    likes_count,
    comments_count,
    shares_count,
    views_count,
    is_sponsored,
    location_name
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
RETURNING id
;

insertMention:
INSERT INTO mention(post_id, mentioned_username, platform) VALUES (?, ?, ?);

insertHashtag:
INSERT INTO hashtag(name) VALUES (?);

insertPostHashtag:
INSERT INTO post_hashtag(post_id, hashtag_id) VALUES (?, ?);

insertOneComment:
INSERT INTO comment VALUES?;

insertMedia:
INSERT INTO media(
    post_id,
    media_url,
    _media_url,
    media_type,
    media_format,
    height,
    width,
    duration,
    alt_text
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);

insertCreator:
INSERT INTO creator(
    _id,
    username,
    full_name,
    profile_pic_url,
    is_verified,
    bio,
    platform
) VALUES (?, ?, ?, ?, ?, ?, ?)
RETURNING id;


selectOrInsertCreator:
WITH new_or_existing AS (
INSERT INTO creator(
    _id,
    username,
    full_name,
    profile_pic_url,
    is_verified,
    bio,
    platform
) VALUES (?, ?, ?, ?, ?, ?, ?)
ON CONFLICT(username, platform) DO NOTHING
RETURNING id
)
SELECT id FROM new_or_existing;

selectOrInsertHashtag:
WITH new_or_existing AS (
INSERT INTO hashtag(
    name
) VALUES (?)
ON CONFLICT(name) DO NOTHING
RETURNING id
)
SELECT * FROM new_or_existing;


selectPosts:
SELECT * FROM post WHERE caption LIKE '%skiing%' ORDER BY likes_count DESC LIMIT ?;

selectPostById:
SELECT * FROM post WHERE id = ? LIMIT 1;

searchPosts:
    SELECT p.*
    FROM post AS p
    LEFT JOIN creator AS c ON p.creator_id = c.id
    LEFT JOIN post_hashtag AS ph ON p.id = ph.post_id
    LEFT JOIN hashtag AS h ON ph.hashtag_id = h.id
    WHERE
        (:captionSearchTerm IS NULL OR p.caption LIKE '%' || :captionSearchTerm || '%')
        AND (:usernameSearchTerm IS NULL OR c.username LIKE '%' || :usernameSearchTerm || '%')
        AND (:hashtagName IS NULL OR h.name = :hashtagName)
    ORDER BY p.created_at DESC
    LIMIT :limit OFFSET :offset;

updatePost:
UPDATE post SET
    cover_url = :cover_url,
    creator_id = :creator_id,
    caption = :caption,
    platform = :platform,
    created_at = :created_at,
    likes_count = :likes_count,
    comments_count = :comments_count,
    shares_count = :shares_count,
    views_count = :views_count,
    is_sponsored = :is_sponsored,
    location_name = :location_name
WHERE id = :id;


getCompositePostById:
SELECT
    p.id AS post_id,
    p.cover_url AS post_cover_url,
    p.creator_id AS post_creator_id,
    p.caption AS post_caption,
    p.platform AS post_platform,
    p.created_at AS post_created_at,
    p.likes_count AS post_likes_count,
    p.comments_count AS post_comments_count,
    p.shares_count AS post_shares_count,
    p.views_count AS post_views_count,
    p.is_sponsored AS post_is_sponsored,
    p.location_name AS post_location_name,

    c.id AS creator_id,
    c.username AS creator_username,
    c.full_name AS creator_full_name,
    c.profile_pic_url AS creator_profile_pic_url,
    c.is_verified AS creator_is_verified,
    c.bio AS creator_bio,
    c.platform AS creator_platform,

    m.id AS media_id,
    m.media_url AS media_media_url,
    m.media_type AS media_media_type,
    m.height AS media_height,
    m.width AS media_width,
    m.duration AS media_duration,
    m.alt_text AS media_alt_text,
    m.media_format AS media_media_format,

    h.id AS hashtag_id,
    h.name AS hashtag_name,

    ment.id AS mention_id,
    ment.mentioned_username AS mention_mentioned_username,
    ment.platform AS mention_platform
FROM post AS p
LEFT JOIN creator AS c ON p.creator_id = c.id
LEFT JOIN media AS m ON m.post_id = p.id
LEFT JOIN post_hashtag AS ph ON ph.post_id = p.id
LEFT JOIN hashtag AS h ON h.id = ph.hashtag_id
LEFT JOIN mention AS ment ON ment.post_id = p.id
WHERE p.id = ?;

